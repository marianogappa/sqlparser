{{- $types := .Types -}}
{{- $operators := .Operators -}}
# sqlparser - simple SQL parser

Based on https://github.com/marianogappa/sqlparser

Documentation on https://godoc.org/github.com/msaf1980/sqlparser
### Usage

```
package main

import (
	"fmt"
	"log"

	"github.com/msaf1980/sqlparser"
)

func main() {
	query, err := sqlparser.Parse("SELECT a, b, c FROM 'd' WHERE e = '1' AND f > '2'")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%+#v", query)
}
```

{{range .NoErrorExamples}}
### Example: {{.Name}}

```
query, err := sqlparser.Parse(`{{.SQL}}`)

query.Query {
	Type: {{index $types .Expected.Type}}
	TableName: {{.Expected.TableName}}
	Conditions: [{{range .Expected.Conditions}}
        {
            Operand1: {{.Operand1}},
            Operand1Type: {{.Operand1Type}},
            Operator: {{index $operators .Operator}},
            Operand2: {{.Operand2}},
            Operand2Type: {{.Operand2Type}},
        }{{end -}}]
	Updates: {{.Expected.Updates}}
	Inserts: {{.Expected.Inserts}}
	Fields: {{.Expected.Fields}}
}
```
{{end}}

{{range .ErrorExamples}}
### Example: {{.Name}}

```
query, err := sqlparser.Parse(`{{.SQL}}`)

{{.Err}}
```
{{end}}
